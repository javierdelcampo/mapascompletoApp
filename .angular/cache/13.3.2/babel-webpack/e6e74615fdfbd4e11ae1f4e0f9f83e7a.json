{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Javier\\\\formacion\\\\Angular\\\\mapascompletoApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/placesApiClient\";\nimport * as i2 from \"./map.service\";\nexport class PlacesService {\n  constructor(placesApi, mapService) {\n    this.placesApi = placesApi;\n    this.mapService = mapService;\n    this.isLoadingPlaces = false;\n    this.places = [];\n    this.getUserLocation();\n  }\n\n  get isUserLocationReady() {\n    return !!this.userLocation;\n  }\n\n  getUserLocation() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Transformamos el getCurrentPosition en una promesa\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(({\n          coords\n        }) => {\n          _this.userLocation = [coords.longitude, coords.latitude];\n          resolve(_this.userLocation);\n        }, err => {\n          alert('No se pudo obtener la geolocalización');\n          console.log(err);\n          reject();\n        });\n      });\n    })();\n  }\n\n  getPlacesByQuery(query = '') {\n    var _a;\n\n    if (query.length === 0) {\n      this.places = [];\n      this.isLoadingPlaces = false;\n      return;\n    }\n\n    if (!this.userLocation) throw Error('No hay userLocation');\n    this.isLoadingPlaces = true;\n    this.placesApi.get(`/${query}.json`, {\n      params: {\n        proximity: (_a = this.userLocation) === null || _a === void 0 ? void 0 : _a.join(',')\n      }\n    }).subscribe(resp => {\n      this.isLoadingPlaces = false;\n      this.places = resp.features;\n      this.mapService.createMarkersFromPlaces(this.places, this.userLocation);\n    });\n  }\n\n  deletePlaces() {\n    this.places = [];\n  }\n\n}\n\nPlacesService.ɵfac = function PlacesService_Factory(t) {\n  return new (t || PlacesService)(i0.ɵɵinject(i1.PlacesApiClient), i0.ɵɵinject(i2.MapService));\n};\n\nPlacesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlacesService,\n  factory: PlacesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Javier/formacion/Angular/mapascompletoApp/src/app/maps/services/places.service.ts"],"names":["i0","i1","i2","PlacesService","constructor","placesApi","mapService","isLoadingPlaces","places","getUserLocation","isUserLocationReady","userLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","longitude","latitude","err","alert","console","log","getPlacesByQuery","query","_a","length","Error","get","params","proximity","join","subscribe","resp","features","createMarkersFromPlaces","deletePlaces","ɵfac","PlacesService_Factory","t","ɵɵinject","PlacesApiClient","MapService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,SAAD,EAAYC,UAAZ,EAAwB;AAC/B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,eAAL;AACH;;AACsB,MAAnBC,mBAAmB,GAAG;AACtB,WAAO,CAAC,CAAC,KAAKC,YAAd;AACH;;AACKF,EAAAA,eAAe,GAAG;AAAA;;AAAA;AACpB;AACA,aAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAgB;AACrD,UAAA,KAAI,CAACP,YAAL,GAAoB,CAACO,MAAM,CAACC,SAAR,EAAmBD,MAAM,CAACE,QAA1B,CAApB;AACAP,UAAAA,OAAO,CAAC,KAAI,CAACF,YAAN,CAAP;AACH,SAHD,EAGIU,GAAD,IAAS;AACRC,UAAAA,KAAK,CAAC,uCAAD,CAAL;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAP,UAAAA,MAAM;AACT,SAPD;AAQH,OATM,CAAP;AAFoB;AAYvB;;AACDW,EAAAA,gBAAgB,CAACC,KAAK,GAAG,EAAT,EAAa;AACzB,QAAIC,EAAJ;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACpB,WAAKpB,MAAL,GAAc,EAAd;AACA,WAAKD,eAAL,GAAuB,KAAvB;AACA;AACH;;AACD,QAAI,CAAC,KAAKI,YAAV,EACI,MAAMkB,KAAK,CAAC,qBAAD,CAAX;AACJ,SAAKtB,eAAL,GAAuB,IAAvB;AACA,SAAKF,SAAL,CAAeyB,GAAf,CAAoB,IAAGJ,KAAM,OAA7B,EAAqC;AACjCK,MAAAA,MAAM,EAAE;AACJC,QAAAA,SAAS,EAAE,CAACL,EAAE,GAAG,KAAKhB,YAAX,MAA6B,IAA7B,IAAqCgB,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAACM,IAAH,CAAQ,GAAR;AADrE;AADyB,KAArC,EAKKC,SALL,CAKeC,IAAI,IAAI;AACnB,WAAK5B,eAAL,GAAuB,KAAvB;AACA,WAAKC,MAAL,GAAc2B,IAAI,CAACC,QAAnB;AACA,WAAK9B,UAAL,CAAgB+B,uBAAhB,CAAwC,KAAK7B,MAA7C,EAAqD,KAAKG,YAA1D;AACH,KATD;AAUH;;AACD2B,EAAAA,YAAY,GAAG;AACX,SAAK9B,MAAL,GAAc,EAAd;AACH;;AA/CsB;;AAiD3BL,aAAa,CAACoC,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAItC,aAAV,EAAyBH,EAAE,CAAC0C,QAAH,CAAYzC,EAAE,CAAC0C,eAAf,CAAzB,EAA0D3C,EAAE,CAAC0C,QAAH,CAAYxC,EAAE,CAAC0C,UAAf,CAA1D,CAAP;AAA+F,CAAxJ;;AACAzC,aAAa,CAAC0C,KAAd,GAAsB,aAAc7C,EAAE,CAAC8C,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE5C,aAAT;AAAwB6C,EAAAA,OAAO,EAAE7C,aAAa,CAACoC,IAA/C;AAAqDU,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../api/placesApiClient\";\r\nimport * as i2 from \"./map.service\";\r\nexport class PlacesService {\r\n    constructor(placesApi, mapService) {\r\n        this.placesApi = placesApi;\r\n        this.mapService = mapService;\r\n        this.isLoadingPlaces = false;\r\n        this.places = [];\r\n        this.getUserLocation();\r\n    }\r\n    get isUserLocationReady() {\r\n        return !!this.userLocation;\r\n    }\r\n    async getUserLocation() {\r\n        // Transformamos el getCurrentPosition en una promesa\r\n        return new Promise((resolve, reject) => {\r\n            navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n                this.userLocation = [coords.longitude, coords.latitude];\r\n                resolve(this.userLocation);\r\n            }, (err) => {\r\n                alert('No se pudo obtener la geolocalización');\r\n                console.log(err);\r\n                reject();\r\n            });\r\n        });\r\n    }\r\n    getPlacesByQuery(query = '') {\r\n        var _a;\r\n        if (query.length === 0) {\r\n            this.places = [];\r\n            this.isLoadingPlaces = false;\r\n            return;\r\n        }\r\n        if (!this.userLocation)\r\n            throw Error('No hay userLocation');\r\n        this.isLoadingPlaces = true;\r\n        this.placesApi.get(`/${query}.json`, {\r\n            params: {\r\n                proximity: (_a = this.userLocation) === null || _a === void 0 ? void 0 : _a.join(',')\r\n            }\r\n        })\r\n            .subscribe(resp => {\r\n            this.isLoadingPlaces = false;\r\n            this.places = resp.features;\r\n            this.mapService.createMarkersFromPlaces(this.places, this.userLocation);\r\n        });\r\n    }\r\n    deletePlaces() {\r\n        this.places = [];\r\n    }\r\n}\r\nPlacesService.ɵfac = function PlacesService_Factory(t) { return new (t || PlacesService)(i0.ɵɵinject(i1.PlacesApiClient), i0.ɵɵinject(i2.MapService)); };\r\nPlacesService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PlacesService, factory: PlacesService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}